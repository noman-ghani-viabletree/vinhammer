<?phpif (!defined('ABSPATH')) {	exit;}if ( ! class_exists( 'UWA_Email_Place_Bid_Admin' ) ) {    /**     *     * @class UWA_Email_Place_Bid_Admin     * @package Ultimate WooCommerce Auction PRO     * @author Nitesh Singh      * @since 1.0      *     */    class UWA_Email_Place_Bid_Admin extends WC_Email {        /**         * Define email related information         *                  */                public function __construct() {                        $this->id = 'woo_ua_email_place_bid_admin';            $this->title = __('Ultimate Auction - Admin Bid Notification', 'woo_ua');                       $this->description = __('â€‹Email Notification sent to Admin when Bidder places a bid.', 'woo_ua');                              /*$this->heading = "{username}". __(' recently placed a bid on Auction - ', 'woo_ua'). "{auction_name}";*/            $this->heading = __('Bid placed on Auction', 'woo_ua');            $this->subject_admin = "{username}". __(' recently placed a bid on Auction - ', 'woo_ua'). "{auction_name}";            $this->template_html = 'emails/placed-bid-admin.php';            $this->template_plain = 'emails/plain/placed-bid-admin.php';	            /* Trigger when bid placed */            add_action( 'uwa_pro_bid_place_email_admin', array( $this, 'trigger' ), 10, 2 );            /* Call parent constructor to load any other defaults not explicity defined here */            parent::__construct();   														$this->recipient = $this->get_option( 'recipient' );					if ( ! $this->recipient ){						$this->recipient = get_option( 'admin_email' );					}				        }        /**         * Define trigger         *         * @param object $product , int $user_id         *         */         public function trigger( $user_id, $product ) {                       /* Check is email enable or not */            if ( !$this->is_enabled() ) {                return;            }            $user = get_user_by('id', $user_id);            $url_product = get_permalink($product->get_id());            $username = $user->user_login;             $auction_name =  get_the_title($product->get_id());            $recipients1 =array();                       $url_product = get_permalink($product->get_id());			/*$get_heading_admin = $this->get_option( 'heading' );			$adminmail_heading = $get_heading_admin ? $get_heading_admin : $this->heading;				$adminmail_heading_string = str_replace( '{username}', $username, $adminmail_heading );			$adminmail_heading_string = str_replace( '{auction_name}', $auction_name, $adminmail_heading_string );			$this->heading = $adminmail_heading_string; */			                $this->object = array(                    'product_name'  => $product->get_title(),                    'product'       => $product,                    'user_name'     => $user->data->user_login,                    'url_product'   => $url_product,                    'user_type'   => "admin",                    'placebid_userid' => $user_id,                );                            $recipients1[]= $this->get_recipient();            if ( count( $recipients1 ) > 0 ) {				$get_subj_admin = $this->get_option( 'subject_admin' );				$adminmail_subject = $get_subj_admin ? $get_subj_admin : $this->subject_admin;													$adminmail_subject_string = str_replace( '{username}', $username, $adminmail_subject );				$adminmail_subject_string = str_replace( '{auction_name}', $auction_name, $adminmail_subject_string );                foreach ( $recipients1 as $key=>$value) {                                $this->send( $value, $adminmail_subject_string, $this->get_content(), $this->get_headers(),                         $this->get_attachments() );                }            }                                }        /**         * Get content html          *         * @return array         *         */        public function get_content_html() {            $get_heading_admin = $this->get_option( 'heading' );            $uwa_email_heading = $get_heading_admin ? $get_heading_admin : $this->heading;			//$uwa_email_heading = $this->format_string($this->heading);            return wc_get_template_html( $this->template_html,                 array(                    //'email_heading' => $this->get_heading(),                    'email_heading' => $uwa_email_heading,                                        'sent_to_admin' => true,                    'plain_text'    => false,                    'email'         => $this                ),'', UW_AUCTION_PRO_WC_TEMPLATE );        }        /**         * Get content plain          *         * @return array         *         */        public function get_content_plain() {            $get_heading_admin = $this->get_option( 'heading' );            $uwa_email_heading = $get_heading_admin ? $get_heading_admin : $this->heading;            //$uwa_email_heading = $this->format_string($this->heading);			            return wc_get_template_html( $this->template_plain,                 array(                    //'email_heading' => $this->get_heading(),                    'email_heading' => $uwa_email_heading,                    'sent_to_admin' => true,                    'plain_text'    => true,                    'email'         => $this                ),'', UW_AUCTION_PRO_WC_TEMPLATE );        }        /**         * Add form fields for email                 *         */        public function init_form_fields() {            $this->form_fields = array(                'enabled'    => array(                    'title'   => __( 'Enable/Disable', 'woocommerce' ),                    'type'    => 'checkbox',                    'label'   => __( 'Enable this email notification', 'woocommerce' ),                    'default' => 'yes'                ),				'recipient'    => array(                    'title'       => __( 'Recipient', 'woocommerce' ),                    'type'        => 'text',                    'description' => sprintf( __( 'Enter recipients (comma separated) for admin email.Leave blank to use the default subject:- <code>%s</code>.', 'woo_ua' ), esc_attr( get_option('admin_email') ) ),                    'placeholder' => '',                    'default'     => '',                    'user_type'   => 'admin',                    'desc_tip'    => true                ),                'subject_admin'    => array(                    'title'       => __( 'Subject', 'woo_ua' ),                    'type'        => 'text',                    'description' => sprintf( __( 'Enter the subject of the email that is sent to the admin after successfully placing a bid.Leave blank to use the default subject:- <code>%s</code>.', 'woo_ua' ),                         $this->subject_admin),                    'placeholder' => '',                    'default'     => '',                    'desc_tip'    => true                ),                              'heading'    => array(                    'title'       => __( 'Email Heading', 'woocommerce' ),                    'type'        => 'text',                    'description' => sprintf( __( 'Enter the Heading of the email that is sent to the bidder after successfully placing a bid. Leave blank to use the default heading: <code>%s</code>.', 'woo_ua' ), $this->heading ),                    'placeholder' => '',                    'default'     => '',                    'desc_tip'    => true                ),                'email_type' => array(                    'title'       => __( 'Email type', 'woocommerce' ),                    'type'        => 'select',                    'description' => __( 'Choose which format of email to send.', 'woocommerce' ),                    'default'     => 'html',                    'class'       => 'email_type wc-enhanced-select',                    'options'     => $this->get_email_type_options(),                    'desc_tip'    => true                )            );        }            } /* end of class */} /* end of if - class exists */return new UWA_Email_Place_Bid_Admin();